<br>
<p>You might initially  think a template should give consumers the utmost flexibility, but many  considerations affect the choice of whether to use free-form configurations vs.  known configurations. This section identifies the key customer requirements and  technical considerations that shaped the approach shared in this document.<br /><br>
    <strong>Free-form configurations:&nbsp; </strong></p>
    
<p>On the surface, free-form configurations sound ideal.  They allow you to select a VM type and provide an arbitrary number of nodes and  attached disks for those nodes &mdash; and do so as parameters to a template.  However, this approach is not ideal for some scenarios.<strong><u></u></strong><br />
  In&nbsp;Sizes for virtual machines, the different VM  types and available sizes are identified, and each of the number of durable  disks (2, 4, 8, 16, or 32) that can be attached. Each attached disk provides  500 IOPS and multiples of these disks can be pooled for a multiplier of that  number of IOPS. For example, 16 disks can be pooled to provide 8,000 IOPS.  Pooling is done with configuration in the operating system, using Microsoft  Windows Storage Spaces or redundant array of inexpensive disks (RAID) in Linux.<br /><br>
  A free-form configuration enables the selection several  VM instances, various VM types and sizes for those instances, various disks for  the VM type, and one or more scripts to configure the VM contents. It is common  that a deployment may have multiple types of nodes, such as master and data  nodes, so this flexibility is often provided for every node type.<br /></br>
  As you start to deploy clusters of any significance, you  begin to work with these complex scenarios. If you were deploying a Hadoop  cluster, for example, with 8 master nodes and 200 data nodes, and pooled 4  attached disks on each master node and pooled 16 attached disks per data node,  you would have 208 VMs and 3,232 disks to manage.</p><br>
<p>A storage account will throttle requests above its  identified 20,000 transactions/second limit, so you should look at storage  account partitioning and use calculations to determine the appropriate number  of storage accounts to accommodate this topology. Given the multitude of  combinations supported by the free-form approach, dynamic calculations are  required to determine the appropriate partitioning. The Azure Resource Manager  Template Language does not presently provide mathematical functions, so you  must perform these calculations in code, generating a unique, hard-coded  template with the appropriate details.</p><br>
<p>In enterprise IT and SI scenarios, someone must maintain  the templates and support the deployed topologies for one or more organizations.  This additional overhead &mdash; different configurations and templates for each  customer &mdash; is far from desirable.</p><br>
Considering all these factors, a truly free-form  configuration is less appealing than at first blush.
